React Context is a way to manage state globally.

It can be used together with the useState Hook to share state between
 deeply nested components more easily


Context provides a way to pass data through the component tree without 
having to pass props down manually at every level.

In a typical React application, data is passed top-down (parent to child) via props,
 but such usage can be cumbersome for certain types of props
 (e.g. locale preference, UI theme) that are required by many components 
within an application. Context provides a way to share values like 
these between components without having to explicitly pass a prop through every
 level of the tree.


const value = useContext(MyContext);
Accepts a context object (the value returned from React.createContext) and 
returns the current context value for that context. 
The current context value is determined by the value prop of the 
nearest <MyContext.Provider> above the calling component in the tree.

When the nearest <MyContext.Provider> above the component updates, 
this Hook will trigger a rerender with the latest context value passed 
to that MyContext provider.